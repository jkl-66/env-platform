version: '3.8'

services:
  # PostgreSQL数据库 - 元数据存储
  postgres:
    image: postgres:15-alpine
    container_name: climate_postgres
    environment:
      POSTGRES_DB: climate_metadata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: climate_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - climate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB - 时序数据存储
  influxdb:
    image: influxdb:2.7-alpine
    container_name: climate_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: climate_influx_2024
      DOCKER_INFLUXDB_INIT_ORG: climate-org
      DOCKER_INFLUXDB_INIT_BUCKET: climate-data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: climate_token_2024_very_long_secure_token
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - climate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - 缓存存储
  redis:
    image: redis:7-alpine
    container_name: climate_redis
    command: redis-server --requirepass climate_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - climate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 气候数据分析应用
  climate_app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: climate_app
    environment:
      # 数据库配置
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: climate_metadata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: climate_password_2024
      
      # InfluxDB配置
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: climate_token_2024_very_long_secure_token
      INFLUXDB_ORG: climate-org
      INFLUXDB_BUCKET: climate-data
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: climate_redis_2024
      
      # 应用配置
      DEBUG: "false"
      HOST: "0.0.0.0"
      PORT: 8000
      
      # API密钥（需要在.env文件中设置）
      NOAA_API_KEY: ${NOAA_API_KEY}
      ECMWF_API_KEY: ${ECMWF_API_KEY}
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-climate_secret_key_change_in_production}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - climate_network
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: climate_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    networks:
      - climate_network
    depends_on:
      - climate_app
    restart: unless-stopped

  # Grafana监控面板
  grafana:
    image: grafana/grafana:latest
    container_name: climate_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: climate_grafana_2024
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - climate_network
    depends_on:
      - influxdb
    restart: unless-stopped

# 网络配置
networks:
  climate_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local